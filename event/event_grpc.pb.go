// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package event

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventSinkClient is the client API for EventSink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventSinkClient interface {
	ProcessEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
}

type eventSinkClient struct {
	cc grpc.ClientConnInterface
}

func NewEventSinkClient(cc grpc.ClientConnInterface) EventSinkClient {
	return &eventSinkClient{cc}
}

func (c *eventSinkClient) ProcessEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/event.EventSink/ProcessEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventSinkServer is the server API for EventSink service.
// All implementations must embed UnimplementedEventSinkServer
// for forward compatibility
type EventSinkServer interface {
	ProcessEvent(context.Context, *EventRequest) (*EventResponse, error)
	mustEmbedUnimplementedEventSinkServer()
}

// UnimplementedEventSinkServer must be embedded to have forward compatible implementations.
type UnimplementedEventSinkServer struct {
}

func (UnimplementedEventSinkServer) ProcessEvent(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessEvent not implemented")
}
func (UnimplementedEventSinkServer) mustEmbedUnimplementedEventSinkServer() {}

// UnsafeEventSinkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventSinkServer will
// result in compilation errors.
type UnsafeEventSinkServer interface {
	mustEmbedUnimplementedEventSinkServer()
}

func RegisterEventSinkServer(s grpc.ServiceRegistrar, srv EventSinkServer) {
	s.RegisterService(&EventSink_ServiceDesc, srv)
}

func _EventSink_ProcessEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSinkServer).ProcessEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventSink/ProcessEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSinkServer).ProcessEvent(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventSink_ServiceDesc is the grpc.ServiceDesc for EventSink service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventSink_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventSink",
	HandlerType: (*EventSinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessEvent",
			Handler:    _EventSink_ProcessEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}

// EventProcessorClient is the client API for EventProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventProcessorClient interface {
	ProcessEvents(ctx context.Context, opts ...grpc.CallOption) (EventProcessor_ProcessEventsClient, error)
}

type eventProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewEventProcessorClient(cc grpc.ClientConnInterface) EventProcessorClient {
	return &eventProcessorClient{cc}
}

func (c *eventProcessorClient) ProcessEvents(ctx context.Context, opts ...grpc.CallOption) (EventProcessor_ProcessEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventProcessor_ServiceDesc.Streams[0], "/event.EventProcessor/ProcessEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventProcessorProcessEventsClient{stream}
	return x, nil
}

type EventProcessor_ProcessEventsClient interface {
	Send(*ProcessorRequest) error
	Recv() (*ProcessorResponse, error)
	grpc.ClientStream
}

type eventProcessorProcessEventsClient struct {
	grpc.ClientStream
}

func (x *eventProcessorProcessEventsClient) Send(m *ProcessorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventProcessorProcessEventsClient) Recv() (*ProcessorResponse, error) {
	m := new(ProcessorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventProcessorServer is the server API for EventProcessor service.
// All implementations must embed UnimplementedEventProcessorServer
// for forward compatibility
type EventProcessorServer interface {
	ProcessEvents(EventProcessor_ProcessEventsServer) error
	mustEmbedUnimplementedEventProcessorServer()
}

// UnimplementedEventProcessorServer must be embedded to have forward compatible implementations.
type UnimplementedEventProcessorServer struct {
}

func (UnimplementedEventProcessorServer) ProcessEvents(EventProcessor_ProcessEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessEvents not implemented")
}
func (UnimplementedEventProcessorServer) mustEmbedUnimplementedEventProcessorServer() {}

// UnsafeEventProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventProcessorServer will
// result in compilation errors.
type UnsafeEventProcessorServer interface {
	mustEmbedUnimplementedEventProcessorServer()
}

func RegisterEventProcessorServer(s grpc.ServiceRegistrar, srv EventProcessorServer) {
	s.RegisterService(&EventProcessor_ServiceDesc, srv)
}

func _EventProcessor_ProcessEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventProcessorServer).ProcessEvents(&eventProcessorProcessEventsServer{stream})
}

type EventProcessor_ProcessEventsServer interface {
	Send(*ProcessorResponse) error
	Recv() (*ProcessorRequest, error)
	grpc.ServerStream
}

type eventProcessorProcessEventsServer struct {
	grpc.ServerStream
}

func (x *eventProcessorProcessEventsServer) Send(m *ProcessorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventProcessorProcessEventsServer) Recv() (*ProcessorRequest, error) {
	m := new(ProcessorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventProcessor_ServiceDesc is the grpc.ServiceDesc for EventProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventProcessor",
	HandlerType: (*EventProcessorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessEvents",
			Handler:       _EventProcessor_ProcessEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "event.proto",
}
